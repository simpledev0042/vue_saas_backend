{"version":3,"file":"js/4028.8bd60570.js","mappings":"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","sources":["webpack://velzon/./node_modules/@vuelidate/core/dist/index.esm.js"],"sourcesContent":["import { isReactive, isReadonly, computed, unref, ref, watch, reactive, isRef, nextTick, inject, provide, getCurrentInstance, onBeforeMount, onBeforeUnmount } from 'vue-demi';\n\nfunction unwrapObj(obj) {\n  let ignoreKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return Object.keys(obj).reduce((o, k) => {\n    if (ignoreKeys.includes(k)) return o;\n    o[k] = unref(obj[k]);\n    return o;\n  }, {});\n}\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isProxy(value) {\n  return isReactive(value) || isReadonly(value);\n}\nfunction get(obj, stringPath, def) {\n  // Cache the current object\n  let current = obj;\n  const path = stringPath.split('.'); // For each item in the path, dig into the object\n\n  for (let i = 0; i < path.length; i++) {\n    // If the item isn't found, return the default (or null)\n    if (!current[path[i]]) return def; // Otherwise, update the current  value\n\n    current = current[path[i]];\n  }\n\n  return current;\n}\nfunction gatherBooleanGroupProperties(group, nestedResults, property) {\n  return computed(() => {\n    return group.some(path => {\n      return get(nestedResults, path, {\n        [property]: false\n      })[property];\n    });\n  });\n}\nfunction gatherArrayGroupProperties(group, nestedResults, property) {\n  return computed(() => {\n    return group.reduce((all, path) => {\n      const fetchedProperty = get(nestedResults, path, {\n        [property]: false\n      })[property] || [];\n      return all.concat(fetchedProperty);\n    }, []);\n  });\n}\n\n/**\n * Response form a raw Validator function.\n * Should return a Boolean or an object with $invalid property.\n * @typedef {Boolean | { $valid: Boolean }} ValidatorResponse\n */\n\n/**\n * Calls a validation rule by unwrapping its value first from a ref.\n * @param {Validator} rule\n * @param {Ref} value\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @return {Promise<ValidatorResponse> | ValidatorResponse}\n */\n\nfunction callRule(rule, value, siblingState, instance) {\n  return rule.call(instance, unref(value), unref(siblingState), instance);\n}\n/**\n * Normalizes the validator result\n * Allows passing a boolean of an object like `{ $valid: Boolean }`\n * @param {ValidatorResponse} result - Validator result\n * @return {boolean}\n */\n\n\nfunction normalizeValidatorResponse(result) {\n  return result.$valid !== undefined ? !result.$valid : !result;\n}\n/**\n * Returns the result of an async validator.\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $pending\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Ref<*>[]} watchTargets\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @param {Ref<Number>} $lastCommittedOn\n * @return {{ $invalid: Ref<Boolean>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createAsyncResult(rule, model, $pending, $dirty, _ref, $response, instance) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref;\n  let watchTargets = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n  let siblingState = arguments.length > 8 ? arguments[8] : undefined;\n  let $lastInvalidState = arguments.length > 9 ? arguments[9] : undefined;\n  let $lastCommittedOn = arguments.length > 10 ? arguments[10] : undefined;\n  const $invalid = ref(!!$dirty.value);\n  const $pendingCounter = ref(0);\n  $pending.value = false;\n  const $unwatch = watch([model, $dirty].concat(watchTargets, $lastCommittedOn), () => {\n    if ( // if $lazy and not dirty, return\n    $lazy && !$dirty.value || // if in $rewardEarly mode and no previous errors, nothing pending, return\n    $rewardEarly && !$lastInvalidState.value && !$pending.value) {\n      return;\n    }\n\n    let ruleResult; // make sure we dont break if a validator throws\n\n    try {\n      ruleResult = callRule(rule, model, siblingState, instance);\n    } catch (err) {\n      // convert to a promise, so we can handle it async\n      ruleResult = Promise.reject(err);\n    }\n\n    $pendingCounter.value++;\n    $pending.value = !!$pendingCounter.value; // ensure $invalid is false, while validator is resolving\n\n    $invalid.value = false;\n    Promise.resolve(ruleResult).then(data => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = data;\n      $invalid.value = normalizeValidatorResponse(data);\n    }).catch(error => {\n      $pendingCounter.value--;\n      $pending.value = !!$pendingCounter.value;\n      $response.value = error;\n      $invalid.value = true;\n    });\n  }, {\n    immediate: true,\n    deep: typeof model === 'object'\n  });\n  return {\n    $invalid,\n    $unwatch\n  };\n}\n/**\n * Returns the result of a sync validator\n * @param {Validator} rule\n * @param {Ref<*>} model\n * @param {Ref<Boolean>} $dirty\n * @param {GlobalConfig} config\n * @param {Boolean} config.$lazy\n * @param {Ref<*>} $response\n * @param {VueInstance} instance\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState\n * @return {{$unwatch: (function(): {}), $invalid: ComputedRef<boolean>}}\n */\n\n\nfunction createSyncResult(rule, model, $dirty, _ref2, $response, instance, siblingState, $lastInvalidState) {\n  let {\n    $lazy,\n    $rewardEarly\n  } = _ref2;\n\n  const $unwatch = () => ({});\n\n  const $invalid = computed(() => {\n    if ( // return early if $lazy mode and not touched\n    $lazy && !$dirty.value || // If $rewardEarly mode is ON and last invalid was false (no error), return it.\n    // If we want to invalidate, we just flip the last state to true, causing the computed to run again\n    $rewardEarly && !$lastInvalidState.value) {\n      return false;\n    }\n\n    let returnValue = true;\n\n    try {\n      const result = callRule(rule, model, siblingState, instance);\n      $response.value = result;\n      returnValue = normalizeValidatorResponse(result);\n    } catch (err) {\n      $response.value = err;\n    }\n\n    return returnValue;\n  });\n  return {\n    $unwatch,\n    $invalid\n  };\n}\n/**\n * Returns the validation result.\n * Detects async and sync validators.\n * @param {NormalizedValidator} rule\n * @param {Ref<*>} model\n * @param {Ref<boolean>} $dirty\n * @param {GlobalConfig} config - Vuelidate config\n * @param {VueInstance} instance - component instance\n * @param {string} validatorName - name of the current validator\n * @param {string} propertyKey - the current property we are validating\n * @param {string} propertyPath - the deep path to the validated property\n * @param {Object} siblingState\n * @param {Ref<Boolean>} $lastInvalidState - the last invalid state\n * @param {Ref<Number>} $lastCommittedOn - the last time $commit was called\n * @return {{ $params: *, $message: Ref<String>, $pending: Ref<Boolean>, $invalid: Ref<Boolean>, $response: Ref<*>, $unwatch: WatchStopHandle }}\n */\n\n\nfunction createValidatorResult(rule, model, $dirty, config, instance, validatorName, propertyKey, propertyPath, siblingState, $lastInvalidState, $lastCommittedOn) {\n  const $pending = ref(false);\n  const $params = rule.$params || {};\n  const $response = ref(null);\n  let $invalid;\n  let $unwatch;\n\n  if (rule.$async) {\n    ({\n      $invalid,\n      $unwatch\n    } = createAsyncResult(rule.$validator, model, $pending, $dirty, config, $response, instance, rule.$watchTargets, siblingState, $lastInvalidState, $lastCommittedOn));\n  } else {\n    ({\n      $invalid,\n      $unwatch\n    } = createSyncResult(rule.$validator, model, $dirty, config, $response, instance, siblingState, $lastInvalidState));\n  }\n\n  const message = rule.$message;\n  const $message = isFunction(message) ? computed(() => message(unwrapObj({\n    $pending,\n    $invalid,\n    $params: unwrapObj($params),\n    // $params can hold refs, so we unwrap them for easy access\n    $model: model,\n    $response,\n    $validator: validatorName,\n    $propertyPath: propertyPath,\n    $property: propertyKey\n  }))) : message || '';\n  return {\n    $message,\n    $params,\n    $pending,\n    $invalid,\n    $response,\n    $unwatch\n  };\n}\n\n/**\n * Sorts a validation definition into rules, configs and nested validators.\n * @param {Object<NormalizedValidator|Function>} validationsRaw\n * @return {{ rules: Object<NormalizedValidator>, nestedValidators: Object, config: GlobalConfig }}\n */\n\nfunction sortValidations() {\n  let validationsRaw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const validations = unref(validationsRaw);\n  const validationKeys = Object.keys(validations);\n  const rules = {};\n  const nestedValidators = {};\n  const config = {};\n  let validationGroups = null;\n  validationKeys.forEach(key => {\n    const v = validations[key];\n\n    switch (true) {\n      // If it is already normalized, use it\n      case isFunction(v.$validator):\n        rules[key] = v;\n        break;\n      // If it is just a function, normalize it first\n      // into { $validator: <Fun> }\n\n      case isFunction(v):\n        rules[key] = {\n          $validator: v\n        };\n        break;\n\n      case key === '$validationGroups':\n        validationGroups = v;\n        break;\n      // Catch $-prefixed properties as config\n\n      case key.startsWith('$'):\n        config[key] = v;\n        break;\n      // If it doesn’t match any of the above,\n      // treat as nestedValidators state property\n\n      default:\n        nestedValidators[key] = v;\n    }\n  });\n  return {\n    rules,\n    nestedValidators,\n    config,\n    validationGroups\n  };\n}\n\nfunction _empty() {}\n\nconst ROOT_PATH = '__root';\n/** @typedef {import('vue-demi').ComponentPublicInstance} VueInstance */\n\n/** @typedef {import('vue-demi').ComputedRef} ComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapRef} UnwrapRef */\n\n/** @typedef {import('vue-demi').WatchStopHandle} WatchStopHandle */\n\n/** @typedef {import('vue-demi').WritableComputedRef} WritableComputedRef */\n\n/** @typedef {import('vue-demi').UnwrapNestedRefs} UnwrapNestedRefs */\n\n/**\n * @typedef NormalizedValidator\n * @property {Validator} $validator\n * @property {String | Ref<String> | function(*): string} [$message]\n * @property {Object | Ref<Object>} [$params]\n * @property {Object | Ref<Object>} [$async]\n * @property {Ref<*>[]} [$watchTargets]\n */\n\n/**\n * Raw validator function, before being normalized\n * Can return a Promise or a {@see ValidatorResponse}\n * @typedef {function(*): ((Promise<ValidatorResponse> | ValidatorResponse))} Validator\n */\n\n/**\n * @typedef ErrorObject\n * @property {Ref<String>} $message - Reactive error message\n * @property {Ref<Object>} $params - Params passed from withParams\n * @property {Ref<Boolean>} $pending - If validation is pending\n * @property {String} $property - State key\n * @property {String} $propertyPath - Dot notation path to state\n * @property {String} $validator - Validator name\n * @property {String} $uid - Unique identifier\n */\n\n/**\n * @typedef ValidationResult\n * @property {Ref<Boolean>} $pending\n * @property {Ref<Boolean>} $dirty\n * @property {Ref<Boolean>} $invalid\n * @property {Ref<Boolean>} $error\n * @property {Ref<String>} $path\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} $commit\n */\n\n/**\n * Creates the main Validation Results object for a state tree\n * Walks the tree's top level branches\n * @param {Object<NormalizedValidator>} rules - Rules for the current state tree\n * @param {Object} model - Current state value\n * @param {String} key - Key for the current state tree\n * @param {ResultsStorage} [resultsCache] - A cache map of all the validators\n * @param {String} [path] - the current property path\n * @param {GlobalConfig} [config] - the config object\n * @param {VueInstance} instance\n * @param {ComputedRef<Object>} externalResults\n * @param {Object} siblingState\n * @return {ValidationResult | {}}\n */\n\nfunction _call(body, then, direct) {\n  if (direct) {\n    return then ? then(body()) : body();\n  }\n\n  try {\n    var result = Promise.resolve(body());\n    return then ? result.then(then) : result;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n/**\n * Collects the validation results of all nested state properties\n * @param {Object<NormalizedValidator|Function>} validations - The validation\n * @param {Object} nestedState - Current state\n * @param {String} path - Path to current property\n * @param {ResultsStorage} resultsCache - Validations cache map\n * @param {GlobalConfig} config - The config object\n * @param {VueInstance} instance - The current Vue instance\n * @param {ComputedRef<object>} nestedExternalResults - The external results for this nested collection\n * @return {Object<string, VuelidateState>}\n */\n\n\nfunction _callIgnored(body, direct) {\n  return _call(body, _empty, direct);\n}\n\nfunction _invoke(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction createValidationResults(rules, model, key, resultsCache, path, config, instance, externalResults, siblingState) {\n  // collect the property keys\n  const ruleKeys = Object.keys(rules);\n  const cachedResult = resultsCache.get(path, rules);\n  const $dirty = ref(false); // state for the $rewardEarly option\n\n  /** The last invalid state of this property */\n\n  const $lastInvalidState = ref(false);\n  /** The last time $commit was called. Used to re-trigger async calls */\n\n  const $lastCommittedOn = ref(0);\n\n  if (cachedResult) {\n    // if the rules are the same as before, use the cached results\n    if (!cachedResult.$partial) return cachedResult; // remove old watchers\n\n    cachedResult.$unwatch(); // use the `$dirty.value`, so we dont save references by accident\n\n    $dirty.value = cachedResult.$dirty.value;\n  }\n\n  const result = {\n    // restore $dirty from cache\n    $dirty,\n    $path: path,\n    $touch: () => {\n      if (!$dirty.value) $dirty.value = true;\n    },\n    $reset: () => {\n      if ($dirty.value) $dirty.value = false;\n    },\n    $commit: () => {}\n  };\n  /**\n   * If there are no validation rules, it is most likely\n   * a top level state, aka root\n   */\n\n  if (!ruleKeys.length) {\n    // if there are cached results, we should overwrite them with the new ones\n    cachedResult && resultsCache.set(path, rules, result);\n    return result;\n  }\n\n  ruleKeys.forEach(ruleKey => {\n    result[ruleKey] = createValidatorResult(rules[ruleKey], model, result.$dirty, config, instance, ruleKey, key, path, siblingState, $lastInvalidState, $lastCommittedOn);\n  });\n  result.$externalResults = computed(() => {\n    if (!externalResults.value) return [];\n    return [].concat(externalResults.value).map((stringError, index) => ({\n      $propertyPath: path,\n      $property: key,\n      $validator: '$externalResults',\n      $uid: `${path}-externalResult-${index}`,\n      $message: stringError,\n      $params: {},\n      $response: null,\n      $pending: false\n    }));\n  });\n  result.$invalid = computed(() => {\n    const r = ruleKeys.some(ruleKey => unref(result[ruleKey].$invalid)); // cache the last invalid state\n\n    $lastInvalidState.value = r;\n    return !!result.$externalResults.value.length || r;\n  });\n  result.$pending = computed(() => ruleKeys.some(ruleKey => unref(result[ruleKey].$pending)));\n  result.$error = computed(() => result.$dirty.value ? result.$pending.value || result.$invalid.value : false);\n  result.$silentErrors = computed(() => ruleKeys.filter(ruleKey => unref(result[ruleKey].$invalid)).map(ruleKey => {\n    const res = result[ruleKey];\n    return reactive({\n      $propertyPath: path,\n      $property: key,\n      $validator: ruleKey,\n      $uid: `${path}-${ruleKey}`,\n      $message: res.$message,\n      $params: res.$params,\n      $response: res.$response,\n      $pending: res.$pending\n    });\n  }).concat(result.$externalResults.value));\n  result.$errors = computed(() => result.$dirty.value ? result.$silentErrors.value : []);\n\n  result.$unwatch = () => ruleKeys.forEach(ruleKey => {\n    result[ruleKey].$unwatch();\n  });\n\n  result.$commit = () => {\n    $lastInvalidState.value = true;\n    $lastCommittedOn.value = Date.now();\n  };\n\n  resultsCache.set(path, rules, result);\n  return result;\n}\n\nfunction collectNestedValidationResults(validations, nestedState, path, resultsCache, config, instance, nestedExternalResults) {\n  const nestedValidationKeys = Object.keys(validations); // if we have no state, return empty object\n\n  if (!nestedValidationKeys.length) return {};\n  return nestedValidationKeys.reduce((results, nestedKey) => {\n    // build validation results for nested state\n    results[nestedKey] = setValidations({\n      validations: validations[nestedKey],\n      state: nestedState,\n      key: nestedKey,\n      parentKey: path,\n      resultsCache,\n      globalConfig: config,\n      instance,\n      externalResults: nestedExternalResults\n    });\n    return results;\n  }, {});\n}\n/**\n * Generates the Meta fields from the results\n * @param {ValidationResult|{}} results\n * @param {Object.<string, VuelidateState>} nestedResults\n * @param {Object.<string, ValidationResult>} childResults\n * @return {{$anyDirty: Ref<Boolean>, $error: Ref<Boolean>, $invalid: Ref<Boolean>, $errors: Ref<ErrorObject[]>, $dirty: Ref<Boolean>, $touch: Function, $reset: Function }}\n */\n\n\nfunction createMetaFields(results, nestedResults, childResults) {\n  const allResults = computed(() => [nestedResults, childResults].filter(res => res).reduce((allRes, res) => {\n    return allRes.concat(Object.values(unref(res)));\n  }, [])); // returns `$dirty` as true, if all children are dirty\n\n  const $dirty = computed({\n    get() {\n      return results.$dirty.value || (allResults.value.length ? allResults.value.every(r => r.$dirty) : false);\n    },\n\n    set(v) {\n      results.$dirty.value = v;\n    }\n\n  });\n  const $silentErrors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$silentErrors) || []; // collect all nested and child $silentErrors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$silentErrors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$silentErrors);\n    }, []); // merge the $silentErrors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $errors = computed(() => {\n    // current state level errors, fallback to empty array if root\n    const modelErrors = unref(results.$errors) || []; // collect all nested and child $errors\n\n    const nestedErrors = allResults.value.filter(result => (unref(result).$errors || []).length).reduce((errors, result) => {\n      return errors.concat(...result.$errors);\n    }, []); // merge the $errors\n\n    return modelErrors.concat(nestedErrors);\n  });\n  const $invalid = computed(() => // if any of the nested values is invalid\n  allResults.value.some(r => r.$invalid) || // or if the current state is invalid\n  unref(results.$invalid) || // fallback to false if is root\n  false);\n  const $pending = computed(() => // if any of the nested values is pending\n  allResults.value.some(r => unref(r.$pending)) || // if any of the current state validators is pending\n  unref(results.$pending) || // fallback to false if is root\n  false);\n  const $anyDirty = computed(() => allResults.value.some(r => r.$dirty) || allResults.value.some(r => r.$anyDirty) || $dirty.value);\n  const $error = computed(() => $dirty.value ? $pending.value || $invalid.value : false);\n\n  const $touch = () => {\n    // call the root $touch\n    results.$touch(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$touch();\n    });\n  };\n\n  const $commit = () => {\n    // call the root $touch\n    results.$commit(); // call all nested level $touch\n\n    allResults.value.forEach(result => {\n      result.$commit();\n    });\n  };\n\n  const $reset = () => {\n    // reset the root $dirty state\n    results.$reset(); // reset all the children $dirty states\n\n    allResults.value.forEach(result => {\n      result.$reset();\n    });\n  }; // Ensure that if all child and nested results are $dirty, this also becomes $dirty\n\n\n  if (allResults.value.length && allResults.value.every(nr => nr.$dirty)) $touch();\n  return {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  };\n}\n/**\n * @typedef VuelidateState\n * @property {WritableComputedRef<any>} $model\n * @property {ComputedRef<Boolean>} $dirty\n * @property {ComputedRef<Boolean>} $error\n * @property {ComputedRef<ErrorObject[]>} $errors\n * @property {ComputedRef<Boolean>} $invalid\n * @property {ComputedRef<Boolean>} $anyDirty\n * @property {ComputedRef<Boolean>} $pending\n * @property {Function} $touch\n * @property {Function} $reset\n * @property {String} $path\n * @property {ComputedRef<ErrorObject[]>} $silentErrors\n * @property {Function} [$validate]\n * @property {Function} [$getResultsForChild]\n * @property {Object.<string, VuelidateState>}\n */\n\n/**\n * Main Vuelidate bootstrap function.\n * Used both for Composition API in `setup` and for Global App usage.\n * Used to collect validation state, when walking recursively down the state tree\n * @param {Object} params\n * @param {Object<NormalizedValidator|Function>} params.validations\n * @param {Object} params.state\n * @param {String} [params.key] - Current state property key. Used when being called on nested items\n * @param {String} [params.parentKey] - Parent state property key. Used when being called recursively\n * @param {Object<string, ValidationResult>} [params.childResults] - Used to collect child results.\n * @param {ResultsStorage} params.resultsCache - The cached validation results\n * @param {VueInstance} params.instance - The current Vue instance\n * @param {GlobalConfig} params.globalConfig - The validation config, passed to this setValidations instance.\n * @param {UnwrapNestedRefs<object> | Ref<Object>} params.externalResults - External validation results\n * @return {UnwrapNestedRefs<VuelidateState>}\n */\n\n\nfunction setValidations(_ref) {\n  /**\n   * Executes the validators and returns the result.\n   * @return {Promise<boolean>}\n   */\n  const $validate = _async(function () {\n    $touch();\n    return _invoke(function () {\n      if (mergedConfig.$rewardEarly) {\n        $commit(); // await the watchers\n\n        return _callIgnored(nextTick);\n      }\n    }, function () {\n      // await the watchers\n      return _call(nextTick, function () {\n        return new Promise(resolve => {\n          // return whether it is valid or not\n          if (!$pending.value) return resolve(!$invalid.value);\n          const unwatch = watch($pending, () => {\n            resolve(!$invalid.value);\n            unwatch();\n          });\n        });\n      });\n    });\n  });\n  /**\n   * Returns a child component's results, based on registration name\n   * @param {string} key\n   * @return {VuelidateState}\n   */\n\n\n  let {\n    validations,\n    state,\n    key,\n    parentKey,\n    childResults,\n    resultsCache,\n    globalConfig = {},\n    instance,\n    externalResults\n  } = _ref;\n  const path = parentKey ? `${parentKey}.${key}` : key; // Sort out the validation object into:\n  // – rules = validators for current state tree fragment\n  // — nestedValidators = nested state fragments keys that might contain more validators\n  // – config = configuration properties that affect this state fragment\n\n  const {\n    rules,\n    nestedValidators,\n    config,\n    validationGroups\n  } = sortValidations(validations);\n  const mergedConfig = Object.assign({}, globalConfig, config); // create protected state for cases when the state branch does not exist yet.\n  // This protects when using the OptionsAPI as the data is bound after the setup method\n\n  const nestedState = key ? computed(() => {\n    const s = unref(state);\n    return s ? unref(s[key]) : undefined;\n  }) : state; // cache the external results, so we can revert back to them\n\n  const cachedExternalResults = Object.assign({}, unref(externalResults) || {});\n  const nestedExternalResults = computed(() => {\n    const results = unref(externalResults);\n    if (!key) return results;\n    return results ? unref(results[key]) : undefined;\n  }); // Use rules for the current state fragment and validate it\n\n  const results = createValidationResults(rules, nestedState, key, resultsCache, path, mergedConfig, instance, nestedExternalResults, state); // Use nested keys to repeat the process\n  // *WARN*: This is recursive\n\n  const nestedResults = collectNestedValidationResults(nestedValidators, nestedState, path, resultsCache, mergedConfig, instance, nestedExternalResults);\n  const $validationGroups = {};\n\n  if (validationGroups) {\n    Object.entries(validationGroups).forEach(_ref2 => {\n      let [key, group] = _ref2;\n      $validationGroups[key] = {\n        $invalid: gatherBooleanGroupProperties(group, nestedResults, '$invalid'),\n        $error: gatherBooleanGroupProperties(group, nestedResults, '$error'),\n        $pending: gatherBooleanGroupProperties(group, nestedResults, '$pending'),\n        $errors: gatherArrayGroupProperties(group, nestedResults, '$errors'),\n        $silentErrors: gatherArrayGroupProperties(group, nestedResults, '$silentErrors')\n      };\n    });\n  } // Collect and merge this level validation results\n  // with all nested validation results\n\n\n  const {\n    $dirty,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $error,\n    $pending,\n    $touch,\n    $reset,\n    $silentErrors,\n    $commit\n  } = createMetaFields(results, nestedResults, childResults);\n  /**\n   * If we have no `key`, this is the top level state\n   * We dont need `$model` there.\n   */\n\n  const $model = key ? computed({\n    get: () => unref(nestedState),\n    set: val => {\n      $dirty.value = true;\n      const s = unref(state);\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n\n      if (isRef(s[key])) {\n        s[key].value = val;\n      } else {\n        s[key] = val;\n      }\n    }\n  }) : null;\n\n  if (key && mergedConfig.$autoDirty) {\n    watch(nestedState, () => {\n      if (!$dirty.value) $touch();\n      const external = unref(externalResults);\n\n      if (external) {\n        external[key] = cachedExternalResults[key];\n      }\n    }, {\n      flush: 'sync'\n    });\n  }\n\n  function $getResultsForChild(key) {\n    return (childResults.value || {})[key];\n  }\n\n  function $clearExternalResults() {\n    if (isRef(externalResults)) {\n      externalResults.value = cachedExternalResults;\n    } else {\n      // if the external results state was empty, we need to delete every property, one by one\n      if (Object.keys(cachedExternalResults).length === 0) {\n        Object.keys(externalResults).forEach(k => {\n          delete externalResults[k];\n        });\n      } else {\n        // state was not empty, so we just assign it back into the current state\n        Object.assign(externalResults, cachedExternalResults);\n      }\n    }\n  }\n\n  return reactive(Object.assign({}, results, {\n    // NOTE: The order here is very important, since we want to override\n    // some of the *results* meta fields with the collective version of it\n    // that includes the results of nested state validation results\n    $model,\n    $dirty,\n    $error,\n    $errors,\n    $invalid,\n    $anyDirty,\n    $pending,\n    $touch,\n    $reset,\n    $path: path || ROOT_PATH,\n    $silentErrors,\n    $validate,\n    $commit\n  }, childResults && {\n    $getResultsForChild,\n    $clearExternalResults,\n    $validationGroups\n  }, nestedResults));\n}\n\nclass ResultsStorage {\n  constructor() {\n    this.storage = new Map();\n  }\n  /**\n   * Stores a validation result, and its rules by its path\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {ValidationResult} result\n   */\n\n\n  set(path, rules, result) {\n    this.storage.set(path, {\n      rules,\n      result\n    });\n  }\n  /**\n   * Check if the stored `results` for the provided `path` have the same `rules` compared to 'storedRules'\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @param {Object<NormalizedValidator>} storedRules\n   * @return {Boolean}\n   */\n\n\n  checkRulesValidity(path, rules, storedRules) {\n    const storedRulesKeys = Object.keys(storedRules);\n    const newRulesKeys = Object.keys(rules);\n    if (newRulesKeys.length !== storedRulesKeys.length) return false;\n    const hasAllValidators = newRulesKeys.every(ruleKey => storedRulesKeys.includes(ruleKey));\n    if (!hasAllValidators) return false;\n    return newRulesKeys.every(ruleKey => {\n      if (!rules[ruleKey].$params) return true;\n      return Object.keys(rules[ruleKey].$params).every(paramKey => {\n        // make sure to unwrap before comparing\n        return unref(storedRules[ruleKey].$params[paramKey]) === unref(rules[ruleKey].$params[paramKey]);\n      });\n    });\n  }\n  /**\n   * Returns the matched result if catche is valid\n   * @param {String} path\n   * @param {Object<NormalizedValidator>} rules\n   * @return {{$partial: boolean, $dirty: Ref<Boolean>, $unwatch: function}|undefined|ValidationResult}\n   */\n\n\n  get(path, rules) {\n    const storedRuleResultPair = this.storage.get(path);\n    if (!storedRuleResultPair) return undefined;\n    const {\n      rules: storedRules,\n      result\n    } = storedRuleResultPair;\n    const isValidCache = this.checkRulesValidity(path, rules, storedRules);\n    const $unwatch = result.$unwatch ? result.$unwatch : () => ({});\n    if (!isValidCache) return {\n      $dirty: result.$dirty,\n      $partial: true,\n      $unwatch\n    };\n    return result;\n  }\n\n}\n\nconst CollectFlag = {\n  COLLECT_ALL: true,\n  COLLECT_NONE: false\n};\nconst VuelidateInjectChildResults = Symbol('vuelidate#injectChildResults');\nconst VuelidateRemoveChildResults = Symbol('vuelidate#removeChildResults');\n/**\n * Create helpers to collect validation state from child components\n * @param {Object} params\n * @param {String | Number | Boolean} params.$scope - Parent component scope\n * @return {{sendValidationResultsToParent: function[], childResults: ComputedRef<Object>, removeValidationResultsFromParent: function[]}}\n */\n\nfunction nestedValidations(_ref) {\n  let {\n    $scope,\n    instance\n  } = _ref;\n  const childResultsRaw = {};\n  const childResultsKeys = ref([]);\n  const childResults = computed(() => childResultsKeys.value.reduce((results, key) => {\n    results[key] = unref(childResultsRaw[key]);\n    return results;\n  }, {}));\n  /**\n   * Allows children to send validation data up to their parent.\n   * @param {Object} results - the results\n   * @param {Object} args\n   * @param {String} args.$registerAs - the $registeredAs key\n   * @param {String | Number | Boolean} args.$scope - the $scope key\n   */\n\n  function injectChildResultsIntoParent(results, _ref2) {\n    let {\n      $registerAs: key,\n      $scope: childScope,\n      $stopPropagation\n    } = _ref2;\n    if ($stopPropagation || $scope === CollectFlag.COLLECT_NONE || childScope === CollectFlag.COLLECT_NONE || $scope !== CollectFlag.COLLECT_ALL && $scope !== childScope) return;\n    childResultsRaw[key] = results;\n    childResultsKeys.value.push(key);\n  } // combine with other `injectChildResultsIntoParent` from vuelidate instances in this Vue component instance\n\n\n  instance.__vuelidateInjectInstances = [].concat(instance.__vuelidateInjectInstances || [], injectChildResultsIntoParent);\n  /**\n   * Allows children to remove the validation data from their parent, before getting destroyed.\n   * @param {String} key - the registeredAs key\n   */\n\n  function removeChildResultsFromParent(key) {\n    // remove the key\n    childResultsKeys.value = childResultsKeys.value.filter(childKey => childKey !== key); // remove the stored data for the key\n\n    delete childResultsRaw[key];\n  } // combine with other `removeChildResultsFromParent` from vuelidate instances in this Vue component instance\n\n\n  instance.__vuelidateRemoveInstances = [].concat(instance.__vuelidateRemoveInstances || [], removeChildResultsFromParent); // inject the `injectChildResultsIntoParent` method, into the current scope\n\n  const sendValidationResultsToParent = inject(VuelidateInjectChildResults, []); // provide to all of its children the send results to parent function\n\n  provide(VuelidateInjectChildResults, instance.__vuelidateInjectInstances);\n  const removeValidationResultsFromParent = inject(VuelidateRemoveChildResults, []); // provide to all of its children the remove results  function\n\n  provide(VuelidateRemoveChildResults, instance.__vuelidateRemoveInstances);\n  return {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  };\n}\n\n/**\n * Helper proxy for instance property access. It makes every reference\n * reactive for the validation function\n * @param target\n * @return {*|ComputedRef<*>}\n */\n\nfunction ComputedProxyFactory(target) {\n  return new Proxy(target, {\n    get(target, prop) {\n      return typeof target[prop] === 'object' ? ComputedProxyFactory(target[prop]) : computed(() => target[prop]);\n    }\n\n  });\n}\n\n/**\n * @typedef GlobalConfig\n * @property {String} [$registerAs] - Config Object\n * @property {String | Number | Symbol} [$scope] - A scope to limit child component registration\n * @property {Boolean} [$stopPropagation] - Tells a Vue component to stop sending its results up to the parent\n * @property {Ref<Object>} [$externalResults] - External error messages, like from server validation.\n * @property {Boolean} [$autoDirty] - Should the form watch for state changed, and automatically set `$dirty` to true.\n * @property {Boolean} [$lazy] - Should the validations be lazy, and run only after they are dirty\n * @property {Boolean} [$rewardEarly] - Once valid, re-runs property validators only on manual calls of $commit\n */\n\n/**\n * Composition API compatible Vuelidate\n * Use inside the `setup` lifecycle hook\n * @param {Object | GlobalConfig} [validations] - Validations Object or the globalConfig.\n * @param {Object} [state] - State object - required if `validations` is a validation object.\n * @param {GlobalConfig} [globalConfig] - Config Object\n * @return {ComputedRef<*>}\n */\n\nlet uid = 0;\nfunction useVuelidate(validations, state) {\n  var _getCurrentInstance;\n\n  let globalConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  // if we pass only one argument, its most probably the globalConfig.\n  // This use case is so parents can just collect results of child forms.\n  if (arguments.length === 1) {\n    globalConfig = validations;\n    validations = undefined;\n    state = undefined;\n  }\n\n  let {\n    $registerAs,\n    $scope = CollectFlag.COLLECT_ALL,\n    $stopPropagation,\n    $externalResults,\n    currentVueInstance\n  } = globalConfig;\n  const instance = currentVueInstance || ((_getCurrentInstance = getCurrentInstance()) === null || _getCurrentInstance === void 0 ? void 0 : _getCurrentInstance.proxy);\n  const componentOptions = instance ? instance.$options : {}; // if there is no registration name, add one.\n\n  if (!$registerAs) {\n    uid += 1;\n    $registerAs = `_vuelidate_${uid}`;\n  }\n\n  const validationResults = ref({});\n  const resultsCache = new ResultsStorage();\n  const {\n    childResults,\n    sendValidationResultsToParent,\n    removeValidationResultsFromParent\n  } = instance ? nestedValidations({\n    $scope,\n    instance\n  }) : {\n    childResults: ref({})\n  }; // Options API\n\n  if (!validations && componentOptions.validations) {\n    const rules = componentOptions.validations;\n    state = ref({});\n    onBeforeMount(() => {\n      // Delay binding state to validations defined with the Options API until mounting, when the data\n      // has been attached to the component instance. From that point on it will be reactive.\n      state.value = instance;\n      watch(() => isFunction(rules) ? rules.call(state.value, new ComputedProxyFactory(state.value)) : rules, validations => {\n        validationResults.value = setValidations({\n          validations,\n          state,\n          childResults,\n          resultsCache,\n          globalConfig,\n          instance,\n          externalResults: $externalResults || instance.vuelidateExternalResults\n        });\n      }, {\n        immediate: true\n      });\n    });\n    globalConfig = componentOptions.validationsConfig || globalConfig;\n  } else {\n    const validationsWatchTarget = isRef(validations) || isProxy(validations) ? validations // wrap plain objects in a reactive, so we can track changes if they have computed in them.\n    : reactive(validations || {});\n    watch(validationsWatchTarget, newValidationRules => {\n      validationResults.value = setValidations({\n        validations: newValidationRules,\n        state,\n        childResults,\n        resultsCache,\n        globalConfig,\n        instance: instance !== null && instance !== void 0 ? instance : {},\n        externalResults: $externalResults\n      });\n    }, {\n      immediate: true\n    });\n  }\n\n  if (instance) {\n    // send all the data to the parent when the function is invoked inside setup.\n    sendValidationResultsToParent.forEach(f => f(validationResults, {\n      $registerAs,\n      $scope,\n      $stopPropagation\n    })); // before this component is destroyed, remove all the data from the parent.\n\n    onBeforeUnmount(() => removeValidationResultsFromParent.forEach(f => f($registerAs)));\n  }\n\n  return computed(() => {\n    return Object.assign({}, unref(validationResults.value), childResults.value);\n  });\n}\n\nexport { CollectFlag, useVuelidate as default, useVuelidate };\n"],"names":["unwrapObj","obj","ignoreKeys","arguments","length","undefined","Object","keys","reduce","o","k","includes","isFunction","val","isProxy","value","get","stringPath","def","current","path","split","i","gatherBooleanGroupProperties","group","nestedResults","property","some","gatherArrayGroupProperties","all","fetchedProperty","concat","callRule","rule","siblingState","instance","call","normalizeValidatorResponse","result","$valid","createAsyncResult","model","$pending","$dirty","_ref","$response","$lazy","$rewardEarly","watchTargets","$lastInvalidState","$lastCommittedOn","$invalid","$pendingCounter","$unwatch","ruleResult","err","Promise","reject","resolve","then","data","catch","error","immediate","deep","createSyncResult","_ref2","returnValue","createValidatorResult","config","validatorName","propertyKey","propertyPath","$params","$async","$validator","$watchTargets","message","$message","$model","$propertyPath","$property","sortValidations","validationsRaw","validations","validationKeys","rules","nestedValidators","validationGroups","forEach","key","v","startsWith","_empty","ROOT_PATH","_call","body","direct","e","_callIgnored","_invoke","_async","f","args","apply","this","createValidationResults","resultsCache","externalResults","ruleKeys","cachedResult","$partial","$path","$touch","$reset","$commit","ruleKey","$externalResults","map","stringError","index","$uid","r","$error","$silentErrors","filter","res","$errors","Date","now","set","collectNestedValidationResults","nestedState","nestedExternalResults","nestedValidationKeys","results","nestedKey","setValidations","state","parentKey","globalConfig","createMetaFields","childResults","allResults","allRes","values","every","modelErrors","nestedErrors","errors","$anyDirty","nr","$validate","mergedConfig","unwatch","assign","s","cachedExternalResults","$validationGroups","entries","external","$getResultsForChild","$clearExternalResults","$autoDirty","flush","ResultsStorage","constructor","storage","Map","checkRulesValidity","storedRules","storedRulesKeys","newRulesKeys","hasAllValidators","paramKey","storedRuleResultPair","isValidCache","CollectFlag","COLLECT_ALL","COLLECT_NONE","VuelidateInjectChildResults","Symbol","VuelidateRemoveChildResults","nestedValidations","$scope","childResultsRaw","childResultsKeys","injectChildResultsIntoParent","$registerAs","childScope","$stopPropagation","push","removeChildResultsFromParent","childKey","__vuelidateInjectInstances","__vuelidateRemoveInstances","sendValidationResultsToParent","removeValidationResultsFromParent","ComputedProxyFactory","target","Proxy","prop","uid","useVuelidate","_getCurrentInstance","currentVueInstance","proxy","componentOptions","$options","validationResults","vuelidateExternalResults","validationsConfig","validationsWatchTarget","newValidationRules"],"sourceRoot":""}